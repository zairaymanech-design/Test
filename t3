import { Component, OnInit } from '@angular/core';
import { ChartConfiguration, ChartEvent } from 'chart.js';
import { SCENARIOS, ResourceData } from './data';

@Component({
  selector: 'app-drilldown-chart',
  templateUrl: './drilldown-chart.component.html'
})
export class DrilldownChartComponent implements OnInit {
  allData: ResourceData[] = SCENARIOS;
  currentLevel: 'team' | 'group' | 'resource' = 'team';
  currentTeam: string | null = null;
  currentGroup: string | null = null;

  public chartData: ChartConfiguration['data'] = { labels: [], datasets: [] };
  public chartOptions: ChartConfiguration['options'] = {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Teams Overview'
      },
      legend: { display: false }
    },
    onClick: (event, elements) => this.onChartClick(event, elements)
  };

  ngOnInit() {
    this.loadTeamLevel();
  }

  // üß© 1Ô∏è‚É£ Team Level
  loadTeamLevel() {
    this.currentLevel = 'team';
    this.currentTeam = null;
    this.currentGroup = null;

    const grouped = this.aggregateBy('team');
    this.chartData = {
      labels: Object.keys(grouped),
      datasets: [{ label: 'Total Resources', data: Object.values(grouped) }]
    };
    this.chartOptions.plugins!.title!.text = 'Teams Overview';
  }

  // üß© 2Ô∏è‚É£ Group Level
  loadGroupLevel(team: string) {
    this.currentLevel = 'group';
    this.currentTeam = team;
    const filtered = this.allData.filter(d => d.team === team);
    const grouped = this.aggregateBy('group', filtered);

    this.chartData = {
      labels: Object.keys(grouped),
      datasets: [{ label: `${team} Groups`, data: Object.values(grouped) }]
    };
    this.chartOptions.plugins!.title!.text = `Groups in ${team}`;
  }

  // üß© 3Ô∏è‚É£ Resource Level
  loadResourceLevel(group: string) {
    this.currentLevel = 'resource';
    this.currentGroup = group;
    const filtered = this.allData.filter(d => d.group === group);
    const grouped = this.aggregateBy('resource', filtered);

    this.chartData = {
      labels: Object.keys(grouped),
      datasets: [{ label: `${group} Resources`, data: Object.values(grouped) }]
    };
    this.chartOptions.plugins!.title!.text = `Resources in ${group}`;
  }

  // üìà Aggregation Utility
  aggregateBy(key: keyof ResourceData, data: ResourceData[] = this.allData) {
    return data.reduce((acc, curr) => {
      const k = curr[key];
      acc[k] = (acc[k] || 0) + curr.value;
      return acc;
    }, {} as Record<string, number>);
  }

  // üñ±Ô∏è Click Event
  onChartClick(event: ChartEvent, elements: any[]) {
    if (!elements.length) return;
    const index = elements[0].index;
    const label = this.chartData.labels![index] as string;

    if (this.currentLevel === 'team') {
      this.loadGroupLevel(label);
    } else if (this.currentLevel === 'group') {
      this.loadResourceLevel(label);
    }
  }

  // üîô Back Button
  goBack() {
    if (this.currentLevel === 'resource') this.loadGroupLevel(this.currentTeam!);
    else if (this.currentLevel === 'group') this.loadTeamLevel();
  }
}





<div class="chart-container" style="position: relative; height: 400px;">
  <canvas baseChart
          [data]="chartData"
          [options]="chartOptions"
          type="bar">
  </canvas>
</div>

<div style="margin-top: 1rem; text-align: center;">
  <button *ngIf="currentLevel !== 'team'" (click)="goBack()">‚¨ÖÔ∏è Back</button>
</div>