import { Component, OnInit } from '@angular/core';
import { ChartConfiguration, ChartEvent, ActiveElement } from 'chart.js';
import { SCENARIOS, ResourceData } from './data';

@Component({
  selector: 'app-drilldown-chart',
  templateUrl: './drilldown-chart.component.html'
})
export class DrilldownChartComponent implements OnInit {
  allData: ResourceData[] = SCENARIOS;
  currentLevel: 'team' | 'group' | 'resource' = 'team';
  currentTeam: string | null = null;
  currentGroup: string | null = null;

  public chartData: ChartConfiguration['data'] = { labels: [], datasets: [] };
  public chartOptions: ChartConfiguration['options'] = {
    responsive: true,
    plugins: {
      title: { display: true, text: 'Teams Overview' },
      legend: { display: false }
    },
    onClick: (event: ChartEvent, elements: ActiveElement[]): void => this.onChartClick(event, elements)
  };

  // 🔹 Initialize the chart
  ngOnInit(): void {
    this.loadTeamLevel();
  }

  // 🧩 1️⃣ Load team-level data
  loadTeamLevel(): void {
    this.currentLevel = 'team';
    this.currentTeam = null;
    this.currentGroup = null;

    const grouped: Record<string, number> = this.aggregateBy('team');
    this.chartData = {
      labels: Object.keys(grouped),
      datasets: [{ label: 'Total Resources', data: Object.values(grouped) }]
    };
    this.chartOptions.plugins!.title!.text = 'Teams Overview';
  }

  // 🧩 2️⃣ Load group-level data
  loadGroupLevel(team: string): void {
    this.currentLevel = 'group';
    this.currentTeam = team;

    const filtered: ResourceData[] = this.allData.filter(d => d.team === team);
    const grouped: Record<string, number> = this.aggregateBy('group', filtered);

    this.chartData = {
      labels: Object.keys(grouped),
      datasets: [{ label: `${team} Groups`, data: Object.values(grouped) }]
    };
    this.chartOptions.plugins!.title!.text = `Groups in ${team}`;
  }

  // 🧩 3️⃣ Load resource-level data
  loadResourceLevel(group: string): void {
    this.currentLevel = 'resource';
    this.currentGroup = group;

    const filtered: ResourceData[] = this.allData.filter(d => d.group === group);
    const grouped: Record<string, number> = this.aggregateBy('resource', filtered);

    this.chartData = {
      labels: Object.keys(grouped),
      datasets: [{ label: `${group} Resources`, data: Object.values(grouped) }]
    };
    this.chartOptions.plugins!.title!.text = `Resources in ${group}`;
  }

  // 📈 Aggregation utility
  aggregateBy(key: keyof ResourceData, data: ResourceData[] = this.allData): Record<string, number> {
    return data.reduce<Record<string, number>>((acc, curr) => {
      const k = curr[key];
      acc[k] = (acc[k] || 0) + curr.value;
      return acc;
    }, {});
  }

  // 🖱️ Click handler
  onChartClick(event: ChartEvent, elements: ActiveElement[]): void {
    if (!elements.length) return;
    const index: number = elements[0].index;
    const label: string = this.chartData.labels![index] as string;

    if (this.currentLevel === 'team') {
      this.loadGroupLevel(label);
    } else if (this.currentLevel === 'group') {
      this.loadResourceLevel(label);
    }
  }

  // 🔙 Navigation
  goBack(): void {
    if (this.currentLevel === 'resource' && this.currentTeam) {
      this.loadGroupLevel(this.currentTeam);
    } else if (this.currentLevel === 'group') {
      this.loadTeamLevel();
    }
  }
}