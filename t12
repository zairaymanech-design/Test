import { Component, OnInit } from '@angular/core';
import { ChartConfiguration, ChartType } from 'chart.js';

@Component({
  selector: 'app-bar-chart',
  templateUrl: './bar-chart.component.html',
  styleUrls: ['./bar-chart.component.css']
})
export class BarChartComponent implements OnInit {
  public barChartType: ChartType = 'bar';
  public years: number[] = [2023, 2024, 2025];
  public selectedYear = 2024;

  /** Month labels */
  public months = [
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
  ];

  /** Your example data structure */
  private sourceData: Record<string, any[]> = {
    'Aze': [
      ['any', 'Aze', 2024, 1, 54, 7],
      ['any', 'Aze', 2024, 2, 72, 25],
      ['any', 'Aze', 2024, 3, 104, 9],
      ['any', 'Aze', 2024, 4, 64, 3],
      ['any', 'Aze', 2024, 5, 139, 20],
      ['any', 'Aze', 2024, 6, 86, 23],
      ['any', 'Aze', 2024, 7, 148, 8],
      ['any', 'Aze', 2024, 8, 49, 0],
      ['any', 'Aze', 2024, 9, 44, 22],
      ['any', 'Aze', 2024, 10, 51, 35],
    ]
  };

  /** Chart data */
  public barChartData: ChartConfiguration<'bar'>['data'] = {
    labels: this.months,
    datasets: []
  };

  /** Chart options */
  public barChartOptions: ChartConfiguration<'bar'>['options'] = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      x: { stacked: true, grid: { display: false } },
      y: { stacked: true, beginAtZero: true }
    },
    plugins: {
      legend: { display: false },
      tooltip: {
        enabled: true,
        callbacks: {
          label: (ctx) => `${ctx.dataset.label}: ${ctx.parsed.y}`
        }
      }
    }
  };

  ngOnInit(): void {
    this.barChartData = this.loadDataForYear(this.selectedYear);
  }

  /**
   * Build chart data for a given year from the structure
   */
  loadDataForYear(year: number): ChartConfiguration<'bar'>['data'] {
    const businessKey = 'Aze';
    const raw = this.sourceData[businessKey] ?? [];

    // Filter only rows for selected year
    const filtered = raw.filter(item => item[2] === year);

    // Group by month (index 3)
    const monthGroups: Record<number, number[]> = {};
    for (const row of filtered) {
      const month = row[3]; // 4th element (index 3)
      const value = row[4]; // main numeric value
      if (!monthGroups[month]) monthGroups[month] = [];
      monthGroups[month].push(value);
    }

    // Find max number of stacked segments
    const maxSegments = Math.max(...Object.values(monthGroups).map(m => m.length));

    const datasets: ChartConfiguration<'bar'>['data']['datasets'] = [];

    for (let i = 0; i < maxSegments; i++) {
      const dataForSegment = this.months.map((_, monthIndex) => {
        const monthNum = monthIndex + 1;
        return monthGroups[monthNum]?.[i] ?? 0;
      });

      datasets.push({
        label: `Value ${i + 1}`,
        data: dataForSegment,
        backgroundColor: this.randomColor(),
        borderWidth: 1,
        borderColor: '#fff'
      });
    }

    return {
      labels: this.months,
      datasets
    };
  }

  onYearChange(): void {
    this.barChartData = this.loadDataForYear(this.selectedYear);
  }

  /** Generate bright random color */
  private randomColor(): string {
    const r = Math.floor(Math.random() * 180 + 50);
    const g = Math.floor(Math.random() * 180 + 50);
    const b = Math.floor(Math.random() * 180 + 50);
    return `rgb(${r}, ${g}, ${b})`;
  }
}