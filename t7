import { Component, OnInit, AfterViewInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Chart, ChartData, ChartOptions, Plugin } from 'chart.js';

// API data like: [[id, name, type, value], ...]
type ApiItem = [id: number, name: string, type: string, value: number];

@Component({
  selector: 'app-pie-chart',
  templateUrl: './pie-chart.component.html',
  styleUrls: ['./pie-chart.component.css']
})
export class PieChartComponent implements OnInit, AfterViewInit {
  pieChartData!: ChartData<'pie'>;
  pieChartOptions!: ChartOptions<'pie'>;
  loading = true;

  // plugin reference
  htmlLegendPlugin!: Plugin;

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.loadChartData();
    this.registerHtmlLegendPlugin();
  }

  ngAfterViewInit() {
    // Chart.js will render plugin automatically after registration
  }

  loadChartData() {
    this.http.get<ApiItem[]>('https://api.example.com/chart-data').subscribe({
      next: (data) => {
        const labels = data.map(d => d[1]);
        const values = data.map(d => d[3]);
        const colors = labels.map(l => this.generateStablePastelColor(l));

        this.pieChartData = {
          labels,
          datasets: [{
            data: values,
            backgroundColor: colors,
            borderColor: 'rgba(0,0,0,0)',
            borderWidth: 0,
          }]
        };

        this.pieChartOptions = {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false }, // disable default legend
            htmlLegend: { containerID: 'custom-legend' }
          },
          backgroundColor: 'transparent'
        };

        this.loading = false;
      },
      error: (err) => {
        console.error('Error loading chart data', err);
        this.loading = false;
      }
    });
  }

  // ✅ Deterministic pastel color generator
  generateStablePastelColor(label: string): string {
    let hash = 0;
    for (let i = 0; i < label.length; i++) {
      hash = label.charCodeAt(i) + ((hash << 5) - hash);
    }
    const hue = Math.abs(hash % 360);
    const saturation = 65;
    const lightness = 60;
    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
  }

  // ✅ Custom HTML Legend Plugin
  registerHtmlLegendPlugin() {
    this.htmlLegendPlugin = {
      id: 'htmlLegend',
      afterUpdate: (chart, args, options) => {
        const containerID = (options as any).containerID;
        const legendContainer = document.getElementById(containerID);
        if (!legendContainer) return;

        legendContainer.innerHTML = chart.generateLegend();

        const items = legendContainer.getElementsByTagName('li');
        Array.from(items).forEach((item, index) => {
          item.addEventListener('click', () => {
            const meta = chart.getDatasetMeta(0);
            const slice = meta.data[index];
            slice.hidden = !slice.hidden;
            chart.update();
          });
        });
      }
    };

    Chart.register(this.htmlLegendPlugin);
  }
}







<div *ngIf="loading">Loading chart...</div>

<div class="chart-container">
  <!-- Scrollable custom legend on the LEFT -->
  <div id="custom-legend" class="legend-container"></div>

  <!-- Pie chart on the RIGHT -->
  <div class="chart-area">
    <canvas baseChart
            [data]="pieChartData"
            [options]="pieChartOptions"
            [type]="'pie'"
            style="background-color: transparent;">
    </canvas>
  </div>
</div>





.chart-container {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  gap: 1rem;
  width: 100%;
  height: 500px; /* You can adjust height */
}

/* Left side legend */
.legend-container {
  flex: 1;
  max-height: 100%;
  overflow-y: auto;
  border-radius: 8px;
  padding: 0.5rem;
  background: transparent;
}

/* Right side pie chart */
.chart-area {
  flex: 2;
  position: relative;
  height: 100%;
}

/* Legend item styling */
#custom-legend ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

#custom-legend li {
  display: flex;
  align-items: center;
  cursor: pointer;
  margin-bottom: 4px;
  font-size: 0.85rem;
  color: #ddd; /* Adjust for dark/light background */
  transition: opacity 0.2s;
}

#custom-legend li:hover {
  opacity: 0.7;
}

#custom-legend li span {
  display: inline-block;
  width: 12px;
  height: 12px;
  margin-right: 8px;
  border-radius: 2px;
}



