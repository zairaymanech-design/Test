import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ChartData, ChartOptions } from 'chart.js';

type ApiItem = [id: number, name: string, type: string, value: number];

@Component({
  selector: 'app-pie-chart',
  template: `
    <div style="display: block" *ngIf="!loading && pieChartData">
      <canvas baseChart
              [data]="pieChartData"
              [options]="pieChartOptions"
              [type]="'pie'">
      </canvas>
    </div>

    <div *ngIf="loading">Loading chart...</div>
  `,
})
export class PieChartComponent implements OnInit {
  pieChartData!: ChartData<'pie'>;
  pieChartOptions!: ChartOptions<'pie'>;
  loading = true;

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.loadChartData();
  }

  loadChartData() {
    this.http.get<ApiItem[]>('https://api.example.com/chart-data').subscribe({
      next: (data) => {
        // Extract the correct columns from your array
        const labels = data.map(item => item[1]); // name
        const values = data.map(item => item[3]); // value
        const colors = this.generatePastelColors(values.length);

        this.pieChartData = {
          labels,
          datasets: [{
            data: values,
            backgroundColor: colors,
            borderColor: '#ffffff',
            borderWidth: 1,
          }]
        };

        this.pieChartOptions = {
          responsive: true,
          plugins: {
            legend: {
              position: 'right',
              labels: {
                boxWidth: 12,
                font: { size: 10 },
              },
              // Allow click to toggle visibility
              onClick: (e, legendItem, legend) => {
                const index = legendItem.index!;
                const ci = legend.chart;
                const meta = ci.getDatasetMeta(0);
                const item = meta.data[index];
                item.hidden = !item.hidden;
                ci.update();
              }
            },
            tooltip: {
              callbacks: {
                label: ctx => `${ctx.label}: ${ctx.parsed}`,
              },
            },
          },
        };

        this.loading = false;
      },
      error: (err) => {
        console.error('Error loading chart data', err);
        this.loading = false;
      }
    });
  }

  generatePastelColors(count: number): string[] {
    const colors = [];
    const startHue = Math.random() * 360;
    const hueStep = 360 / count;
    for (let i = 0; i < count; i++) {
      const hue = (startHue + i * hueStep) % 360;
      const saturation = 70 + Math.random() * 10;
      const lightness = 75 + Math.random() * 5;
      colors.push(`hsl(${hue}, ${saturation}%, ${lightness}%)`);
    }
    return colors;
  }
}