legendFilter: string = '';
isSliceVisible: boolean[] = [];

ngOnInit() {
  this.fetchData();
}

private transformData(rows: Row[]): ChartConfiguration<'pie'>['data'] {
  const labels: string[] = [];
  const values: number[] = [];
  const colors: string[] = [];

  rows.forEach(([id, label, type, value]) => {
    labels.push(`ID ${id} - ${label} (${type})`);
    values.push(value ?? 0);
    colors.push(this.randomColor());
  });

  // Initialize slice visibility array
  this.isSliceVisible = new Array(values.length).fill(true);

  return {
    labels,
    datasets: [{
      data: values,
      backgroundColor: colors,
      borderColor: '#000',
      borderWidth: 1
    }]
  };
}

filteredIndices(): number[] {
  if (!this.chartData) return [];
  return this.chartData.labels
    .map((_, idx) => idx)
    .filter(idx =>
      this.chartData.labels[idx].toLowerCase().includes(this.legendFilter.toLowerCase())
    );
}

toggleSlice(index: number) {
  if (!this.chartData) return;
  const dataset = this.chartData.datasets[0];
  this.isSliceVisible[index] = !this.isSliceVisible[index];

  // Set value to 0 if hidden, restore original if visible
  const originalValue = dataset.data[index] as number;
  dataset.data[index] = this.isSliceVisible[index] ? originalValue : 0;

  // Update chart
  this.chart?.update(); // requires @ViewChild reference to chart
}

getColor(index: number): string {
  const dataset = this.chartData?.datasets?.[0];
  const colors = dataset?.backgroundColor as string[];
  return colors?.[index] ?? '#000';
}

getValue(index: number): number {
  const dataset = this.chartData?.datasets?.[0];
  return (dataset?.data[index] as number) ?? 0;
}



<div *ngIf="chartData">
  <div class="chart-wrapper">
    <canvas baseChart
      [data]="chartData"
      [type]="chartType"
      [options]="chartOptions">
    </canvas>
  </div>

  <!-- Clickable, scrollable legend -->
  <input type="text" [(ngModel)]="legendFilter" placeholder="Search..." />
  <div class="legend">
    <div *ngFor="let i of filteredIndices()" (click)="toggleSlice(i)" 
         [class.inactive]="!isSliceVisible[i]">
      <span class="color-box" [style.backgroundColor]="getColor(i)"></span>
      {{ chartData.labels[i] }}: {{ getValue(i) }}
    </div>
  </div>
</div>