7
import { Component, OnInit } from '@angular/core';
import { ChartConfiguration, ChartType } from 'chart.js';

type Row = [number, string, string, number];

@Component({
  selector: 'app-merged-pie',
  template: `
    <div class="chart-wrapper">
      <canvas baseChart
        [data]="chartData"
        [type]="chartType"
        [options]="chartOptions">
      </canvas>
    </div>
  `,
  styles: [`
    .chart-wrapper { width: 400px; margin: 2rem auto; }
  `]
})
export class MergedPieComponent implements OnInit {
  chartType: ChartType = 'pie';
  chartData!: ChartConfiguration<'pie'>['data'];

  chartOptions: ChartConfiguration<'pie'>['options'] = {
    responsive: true,
    plugins: {
      legend: { position: 'bottom' },
      tooltip: { callbacks: {
        label: (ctx) => `${ctx.label}: ${ctx.parsed}`
      }}
    }
  };

  // ðŸ”¹ Your raw array directly
  dataArray: Row[] = [
    [1, 'Apples', 'Fruit', 30],
    [1, 'Carrots', 'Vegetable', 20],
    [2, 'Bananas', 'Fruit', 15],
    [2, 'Broccoli', 'Vegetable', 25],
    [3, 'Steak', 'Meat', 40],
    [3, 'Chicken', 'Meat', 35]
  ];

  ngOnInit(): void {
    this.chartData = this.transformData(this.dataArray);
  }

  private transformData(rows: Row[]): ChartConfiguration<'pie'>['data'] {
    // Group by ID first
    const grouped: Record<number, Row[]> = {};
    rows.forEach(row => {
      const [id] = row;
      if (!grouped[id]) grouped[id] = [];
      grouped[id].push(row);
    });

    const labels: string[] = [];
    const values: number[] = [];
    const colors: string[] = [];

    Object.entries(grouped).forEach(([id, group]) => {
      group.forEach(([_, label, type, value]) => {
        labels.push(`ID ${id} - ${label} (${type})`);
        values.push(value);
        colors.push(this.randomColor());
      });
    });

    return {
      labels,
      datasets: [{
        data: values,
        backgroundColor: colors,
        borderColor: '#fff',
        borderWidth: 2
      }]
    };
  }

  private randomColor(): string {
    // Generates a random bright color
    const hue = Math.floor(Math.random() * 360);
    const saturation = 70 + Math.random() * 20; // 70â€“90%
    const lightness = 45 + Math.random() * 10;  // 45â€“55%
    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
  }




private randomColor(): string {

const hue = Math.floor (Math.random() *

360);

const saturation = 80 + Math.random() 15; // vivid const lightness = 35 + Math.random() *

10; // darker return `hsl(${hue}, ${saturation}%, $ {lightness}%)`;

}
}