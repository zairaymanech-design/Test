import { Component, OnInit } from '@angular/core';
import { ChartData, ChartOptions } from 'chart.js';

@Component({
  selector: 'app-pie-chart',
  template: `<div style="display: block">
               <canvas baseChart
                       [data]="pieChartData"
                       [options]="pieChartOptions"
                       [type]="'pie'">
               </canvas>
             </div>`,
})
export class PieChartComponent implements OnInit {
  pieChartData!: ChartData<'pie'>;
  pieChartOptions!: ChartOptions<'pie'>;

  ngOnInit() {
    const dataCount = 200;
    const labels = Array.from({ length: dataCount }, (_, i) => `Item ${i + 1}`);
    const dataValues = Array.from({ length: dataCount }, () => Math.floor(Math.random() * 100) + 1);
    const backgroundColors = this.generatePastelColors(dataCount);

    this.pieChartData = {
      labels,
      datasets: [{
        data: dataValues,
        backgroundColor: backgroundColors,
        borderColor: '#ffffff',
        borderWidth: 1,
      }]
    };

    this.pieChartOptions = {
      responsive: true,
      plugins: {
        legend: {
          position: 'right',
          labels: {
            boxWidth: 12,
            font: { size: 10 },
          },
          onClick: (e, legendItem, legend) => {
            const index = legendItem.index;
            const ci = legend.chart;
            const meta = ci.getDatasetMeta(0);
            meta.data[index].hidden = !meta.data[index].hidden;
            ci.update();
          }
        },
        tooltip: {
          callbacks: {
            label: ctx => `${ctx.label}: ${ctx.parsed}`,
          },
        },
      },
    };
  }

  generatePastelColors(count: number): string[] {
    const colors = [];
    for (let i = 0; i < count; i++) {
      const hue = (i * 360) / count;
      const saturation = 70 + Math.random() * 10;
      const lightness = 75 + Math.random() * 5;
      colors.push(`hsl(${hue}, ${saturation}%, ${lightness}%)`);
    }
    return colors;
  }
}